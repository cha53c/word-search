[{"/Users/chrischase/Dev/word-search/src/index.js":"1","/Users/chrischase/Dev/word-search/src/reportWebVitals.js":"2","/Users/chrischase/Dev/word-search/src/App.js":"3","/Users/chrischase/Dev/word-search/src/components/GridLetter.js":"4","/Users/chrischase/Dev/word-search/src/utils/gridSetup.js":"5","/Users/chrischase/Dev/word-search/src/utils/utils.js":"6","/Users/chrischase/Dev/word-search/src/utils/matching.js":"7","/Users/chrischase/Dev/word-search/src/components/WordCount.js":"8","/Users/chrischase/Dev/word-search/src/components/PlayAgain.js":"9","/Users/chrischase/Dev/word-search/src/utils/grid.js":"10","/Users/chrischase/Dev/word-search/src/utils/populateGrid.js":"11","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js":"12","/Users/chrischase/Dev/word-search/src/app/store.js":"13","/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js":"14","/Users/chrischase/Dev/word-search/src/features/grid/Grid.js":"15","/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js":"16"},{"size":627,"mtime":1617523337419,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1611646243558,"results":"19","hashOfConfig":"18"},{"size":1942,"mtime":1617827115295,"results":"20","hashOfConfig":"18"},{"size":387,"mtime":1615493029008,"results":"21","hashOfConfig":"18"},{"size":710,"mtime":1615413730151,"results":"22","hashOfConfig":"18"},{"size":733,"mtime":1613205119390,"results":"23","hashOfConfig":"18"},{"size":164,"mtime":1617826827073,"results":"24","hashOfConfig":"18"},{"size":144,"mtime":1613028239821,"results":"25","hashOfConfig":"18"},{"size":140,"mtime":1613029720059,"results":"26","hashOfConfig":"18"},{"size":2877,"mtime":1615493471095,"results":"27","hashOfConfig":"18"},{"size":5199,"mtime":1615492549919,"results":"28","hashOfConfig":"18"},{"size":679,"mtime":1617524021316,"results":"29","hashOfConfig":"18"},{"size":272,"mtime":1617776516624,"results":"30","hashOfConfig":"18"},{"size":524,"mtime":1617558555226,"results":"31","hashOfConfig":"18"},{"size":3821,"mtime":1617778040554,"results":"32","hashOfConfig":"18"},{"size":312,"mtime":1617692777043,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1rtdojv",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chrischase/Dev/word-search/src/index.js",[],["69","70"],"/Users/chrischase/Dev/word-search/src/reportWebVitals.js",[],"/Users/chrischase/Dev/word-search/src/App.js",["71","72","73","74","75","76","77","78","79","80"],"/Users/chrischase/Dev/word-search/src/components/GridLetter.js",[],"/Users/chrischase/Dev/word-search/src/utils/gridSetup.js",["81","82"],"import Grid from \"./grid\";\nimport PopulateGrid from \"./populateGrid\";\n\n// const wordLocations = [[0, 1, 2], [2, 5, 8]];\n// const directions = ['N', 'E', 'S', 'W'];\n// const rows = 3, columns = 3;\nconst words = [\"FOX\", \"BOX\", \"LOG\", \"FIG\"];\n// const removeDuplicates = (ar                ray) => [...new Set(array)];\n// const flatten = (array) => array.reduce((prev, curr) => prev.concat(curr))\n// const locationIndexes = removeDuplicates(flatten(wordLocations));\n\nconst gridSetup = {\n    getWords: () => words,\n    // getGrid: () => {\n    //     const grid = Grid.setup(rows, columns, words);\n    //     return grid.letters;\n    // },\n    // getWordLocations: () => wordLocations,\n};\n\nexport default gridSetup;","/Users/chrischase/Dev/word-search/src/utils/utils.js",[],"/Users/chrischase/Dev/word-search/src/utils/matching.js",[],"/Users/chrischase/Dev/word-search/src/components/WordCount.js",[],"/Users/chrischase/Dev/word-search/src/components/PlayAgain.js",[],"/Users/chrischase/Dev/word-search/src/utils/grid.js",[],"/Users/chrischase/Dev/word-search/src/utils/populateGrid.js",["83","84"],"const PopulateGrid = {\n    getRandomLocation(gridSize) {\n        return Math.floor(Math.random() * gridSize);\n        // return availableLocations[`Math.floor(Math.random() * availableLocations.length)];\n    },\n    getAvailableDirections(failedDirections = []) {\n        // directions can be N E S W\n        // N writes from bottom to top. E writes left to right, S top to bottom, W right to left\n        // TODO add diagonals NE, SE, SW, NW\n        const directions = ['N', 'E', \"S\", 'W'];\n        const availableDirections = directions.filter(d => !failedDirections.includes(d));\n        return availableDirections;\n    },\n    getRandomDirection(directions) {\n        if (directions.length === 1) {\n            return directions[0];\n        }\n        return directions[Math.floor(Math.random() * directions.length)];\n    },\n    // TODO write more tests for this\n    findNextDirection(grid, position, word, directions) {\n        const failedDirections = [];\n        let remainingDirections = directions;\n        // TODO change to forEach\n        for (let i = 0; i <= directions.length; i++) {\n            const candidateDirection = this.getRandomDirection(remainingDirections);\n            const directionOK = this.checkDirections(candidateDirection, grid.rows, grid.columns, position, word.length);\n            if (directionOK) {\n                return candidateDirection;\n            }\n            failedDirections.push(candidateDirection);\n            remainingDirections = this.getAvailableDirections(failedDirections);\n        }\n        return false;\n    },\n    insertWord(grid, position, direction, word) {\n        console.log('insertWord', word);\n        const letters = [...word];\n        let letterLocations = [];\n        let currentPosition = position;\n        let collision = false;\n        for(let i = 0; i < letters.length; i++){\n            if (this.collisionDetections(grid, letters[i], currentPosition)) {\n                collision = true;\n                letterLocations = [];\n            }\n            if (collision) {\n                break;\n            }\n            letterLocations.push(currentPosition);\n            // grid.letters[currentPosition] = letters[i];\n            currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        }\n        // letters.forEach(letter => {\n        //     if (this.collisionDetections(grid, letter, currentPosition)) {\n        //         collision = true;\n        //     }\n        //     if (collision) {\n        //         return\n        //     }\n        //     letterLocations.push(currentPosition);\n        //     grid.letters[currentPosition] = letter;\n        //     currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        // });\n        if (collision) {\n            console.log('collision detected');\n            return false;\n        } else {\n            console.log('no collisions');\n            console.log('adding letters to grid');\n            for(let i = 0; i < letters.length; i++) {\n                grid.letters[letterLocations[i]] = letters[i];\n            }\n            console.log('adding to wordLocations', letterLocations );\n            grid.wordLocations.push(letterLocations);\n            return true\n        }\n    },\n    collisionDetections(grid, letter, location) {\n        if (grid.locationIndexes.includes(location)) {\n            //if the letters are the same then it's not a collision\n            return letter !== grid.letters[location];\n        }\n    },\n    calculateNextPosition(grid, direction, currentPosition) {\n        switch (direction) {\n            case 'N':\n                return currentPosition - grid.columns;\n            case 'E':\n                return currentPosition + 1;\n            case 'S':\n                return currentPosition + grid.columns;\n            case 'W':\n                return currentPosition - 1;\n\n        }\n    },\n    checkDirections(direction, rows, columns, position, wordLen) {\n        switch (direction) {\n            case 'N':\n                if (position - ((wordLen - 1) * columns) >= 0) {\n                    return true;\n                }\n                return false;\n            case 'E':\n                const rowEnd = position - (position % columns) + (columns - 1);\n                if (position + (wordLen - 1) > rowEnd) {\n                    return false;\n                }\n                return true;\n            case 'S':\n                // TODO which way of doing this is better\n                if (position + ((wordLen - 1) * columns) > (rows * columns) - 1) {\n                    return false;\n                }\n                // const wordEnd = position + ((wordLen - 1) * columns);\n                // const columnEnd = position + ((rows - (Math.floor(position / rows) + 1)) * columns);\n                // if (wordEnd > columnEnd) {\n                //     return false\n                // }\n                return true;\n            case 'W':\n                const rowStart = position - (position % columns);\n                if (position - (wordLen - 1) < rowStart) {\n                    return false\n                }\n                return true;\n        }\n    }\n}\n\n\nexport default PopulateGrid;\n","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js",[],"/Users/chrischase/Dev/word-search/src/app/store.js",[],"/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js",[],"/Users/chrischase/Dev/word-search/src/features/grid/Grid.js",["85"],"/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":21},{"ruleId":"90","severity":1,"message":"94","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":19},{"ruleId":"90","severity":1,"message":"95","line":6,"column":8,"nodeType":"92","messageId":"93","endLine":6,"endColumn":18},{"ruleId":"90","severity":1,"message":"96","line":8,"column":8,"nodeType":"92","messageId":"93","endLine":8,"endColumn":17},{"ruleId":"90","severity":1,"message":"97","line":11,"column":8,"nodeType":"92","messageId":"93","endLine":11,"endColumn":16},{"ruleId":"90","severity":1,"message":"98","line":17,"column":7,"nodeType":"92","messageId":"93","endLine":17,"endColumn":11},{"ruleId":"90","severity":1,"message":"99","line":18,"column":7,"nodeType":"92","messageId":"93","endLine":18,"endColumn":14},{"ruleId":"90","severity":1,"message":"100","line":20,"column":7,"nodeType":"92","messageId":"93","endLine":20,"endColumn":19},{"ruleId":"90","severity":1,"message":"101","line":33,"column":19,"nodeType":"92","messageId":"93","endLine":33,"endColumn":27},{"ruleId":"90","severity":1,"message":"102","line":37,"column":30,"nodeType":"92","messageId":"93","endLine":37,"endColumn":49},{"ruleId":"90","severity":1,"message":"103","line":1,"column":8,"nodeType":"92","messageId":"93","endLine":1,"endColumn":12},{"ruleId":"90","severity":1,"message":"104","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":85,"column":9,"nodeType":"107","messageId":"108","endLine":95,"endColumn":10},{"ruleId":"105","severity":1,"message":"106","line":98,"column":9,"nodeType":"107","messageId":"108","endLine":127,"endColumn":10},{"ruleId":"90","severity":1,"message":"109","line":29,"column":11,"nodeType":"92","messageId":"93","endLine":29,"endColumn":23},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'wordFound' is defined but never used.","'GridLetter' is defined but never used.","'PlayAgain' is defined but never used.","'matching' is defined but never used.","'rows' is assigned a value but never used.","'columns' is assigned a value but never used.","'StarsDisplay' is assigned a value but never used.","'setWords' is assigned a value but never used.","'setFoundWordIndexes' is assigned a value but never used.","'Grid' is defined but never used.","'PopulateGrid' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'gameComplete' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]