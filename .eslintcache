[{"/Users/chrischase/Dev/word-search/src/index.js":"1","/Users/chrischase/Dev/word-search/src/reportWebVitals.js":"2","/Users/chrischase/Dev/word-search/src/App.js":"3","/Users/chrischase/Dev/word-search/src/components/GridLetter.js":"4","/Users/chrischase/Dev/word-search/src/utils/gridSetup.js":"5","/Users/chrischase/Dev/word-search/src/components/WordList.js":"6","/Users/chrischase/Dev/word-search/src/utils/utils.js":"7","/Users/chrischase/Dev/word-search/src/utils/matching.js":"8","/Users/chrischase/Dev/word-search/src/components/WordCount.js":"9","/Users/chrischase/Dev/word-search/src/components/PlayAgain.js":"10","/Users/chrischase/Dev/word-search/src/utils/grid.js":"11","/Users/chrischase/Dev/word-search/src/utils/populateGrid.js":"12"},{"size":500,"mtime":1611646243557,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1611646243558,"results":"15","hashOfConfig":"14"},{"size":4649,"mtime":1613816300709,"results":"16","hashOfConfig":"14"},{"size":391,"mtime":1611646243556,"results":"17","hashOfConfig":"14"},{"size":650,"mtime":1613821030800,"results":"18","hashOfConfig":"14"},{"size":229,"mtime":1611646243556,"results":"19","hashOfConfig":"14"},{"size":733,"mtime":1613205119390,"results":"20","hashOfConfig":"14"},{"size":146,"mtime":1612030958262,"results":"21","hashOfConfig":"14"},{"size":144,"mtime":1613028239821,"results":"22","hashOfConfig":"14"},{"size":140,"mtime":1613029720059,"results":"23","hashOfConfig":"14"},{"size":1953,"mtime":1613821181760,"results":"24","hashOfConfig":"14"},{"size":3702,"mtime":1613821181751,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1rtdojv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/Users/chrischase/Dev/word-search/src/index.js",[],["52","53"],"/Users/chrischase/Dev/word-search/src/reportWebVitals.js",[],"/Users/chrischase/Dev/word-search/src/App.js",["54","55"],"/Users/chrischase/Dev/word-search/src/components/GridLetter.js",[],"/Users/chrischase/Dev/word-search/src/utils/gridSetup.js",["56","57","58"],"/Users/chrischase/Dev/word-search/src/components/WordList.js",[],"/Users/chrischase/Dev/word-search/src/utils/utils.js",[],"/Users/chrischase/Dev/word-search/src/utils/matching.js",[],"/Users/chrischase/Dev/word-search/src/components/WordCount.js",[],"/Users/chrischase/Dev/word-search/src/components/PlayAgain.js",[],"/Users/chrischase/Dev/word-search/src/utils/grid.js",[],"/Users/chrischase/Dev/word-search/src/utils/populateGrid.js",["59","60"],"const PopulateGrid = {\n    getRandomLocation(gridSize) {\n        return Math.floor(Math.random() * gridSize)\n    },\n    getAvailableDirections(failedDirections = []) {\n        // directions can be N E S W\n        // N writes from bottom to top. E writes left to right, S top to bottom, W right to left\n        // TODO add diagonals NE, SE, SW, NW\n        const directions = ['N', 'E', \"S\", 'W'];\n        const availableDirections = directions.filter(d => !failedDirections.includes(d));\n        return availableDirections;\n    },\n    getRandomDirection(directions) {\n        if (directions.length === 1) {\n            return directions[0];\n        }\n        return directions[Math.floor(Math.random() * directions.length)];\n    },\n    // TODO write more tests for this\n    findNextDirection(grid, position, word, directions) {\n        const failedDirections = [];\n        let remainingDirections = directions;\n        // TODO change to forEach\n        for (let i = 0; i <= directions.length; i++) {\n            const candidateDirection = this.getRandomDirection(remainingDirections);\n            const directionOK = this.checkDirections(candidateDirection, grid.rows, grid.columns, position, word.length);\n            if (directionOK) {\n                return candidateDirection;\n            }\n            failedDirections.push(candidateDirection);\n            remainingDirections = this.getAvailableDirections(failedDirections);\n        }\n        return false;\n    },\n    insertWord(grid, position, direction, word) {\n        const letters = [...word];\n        const letterLocations = [];\n        let currentPosition = position;\n        // TODO detect collisions\n        letters.forEach(letter => {\n            letterLocations.push(currentPosition);\n            grid.letters[currentPosition] = letter;\n            currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        });\n        grid.wordLocations.push(letterLocations);\n    },\n    calculateNextPosition(grid, direction, currentPosition) {\n        switch (direction) {\n            case 'N':\n                return currentPosition - grid.columns;\n            case 'E':\n                return currentPosition + 1;\n            case 'S':\n                return currentPosition + grid.columns;\n            case 'W':\n                return currentPosition -1;\n\n        }\n    },\n    checkDirections(direction, rows, columns, position, wordLen) {\n        // const wordLen = word.length;\n        switch (direction) {\n            case 'N':\n                if (position - ((wordLen - 1) * columns) >= 0) {\n                    return true;\n                }\n                return false;\n            case 'E':\n                const rowEnd = position - (position % columns) + (columns - 1);\n                if (position + (wordLen - 1) > rowEnd) {\n                    return false;\n                }\n                return true;\n            case 'S':\n                // TODO which way of doing this is better\n                if (position + ((wordLen - 1) * columns) > (rows * columns) - 1) {\n                    return false;\n                }\n                // const wordEnd = position + ((wordLen - 1) * columns);\n                // const columnEnd = position + ((rows - (Math.floor(position / rows) + 1)) * columns);\n                // if (wordEnd > columnEnd) {\n                //     return false\n                // }\n                return true;\n            case 'W':\n                const rowStart = position - (position % columns);\n                if (position - (wordLen - 1) < rowStart) {\n                    return false\n                }\n                return true;\n        }\n    }\n}\n\n\nexport default PopulateGrid;\n",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":13,"column":7,"nodeType":"67","messageId":"68","endLine":13,"endColumn":12},{"ruleId":"65","severity":1,"message":"69","line":18,"column":7,"nodeType":"67","messageId":"68","endLine":18,"endColumn":19},{"ruleId":"65","severity":1,"message":"70","line":2,"column":8,"nodeType":"67","messageId":"68","endLine":2,"endColumn":20},{"ruleId":"65","severity":1,"message":"71","line":5,"column":7,"nodeType":"67","messageId":"68","endLine":5,"endColumn":17},{"ruleId":"65","severity":1,"message":"72","line":10,"column":7,"nodeType":"67","messageId":"68","endLine":10,"endColumn":22},{"ruleId":"73","severity":1,"message":"74","line":47,"column":9,"nodeType":"75","messageId":"76","endLine":57,"endColumn":10},{"ruleId":"73","severity":1,"message":"74","line":61,"column":9,"nodeType":"75","messageId":"76","endLine":90,"endColumn":10},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'words' is assigned a value but never used.","Identifier","unusedVar","'StarsDisplay' is assigned a value but never used.","'PopulateGrid' is defined but never used.","'directions' is assigned a value but never used.","'locationIndexes' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]