[{"/Users/chrischase/Dev/word-search/src/index.js":"1","/Users/chrischase/Dev/word-search/src/reportWebVitals.js":"2","/Users/chrischase/Dev/word-search/src/App.js":"3","/Users/chrischase/Dev/word-search/src/components/GridLetter.js":"4","/Users/chrischase/Dev/word-search/src/utils/gridSetup.js":"5","/Users/chrischase/Dev/word-search/src/utils/utils.js":"6","/Users/chrischase/Dev/word-search/src/utils/matching.js":"7","/Users/chrischase/Dev/word-search/src/components/PlayAgain.js":"8","/Users/chrischase/Dev/word-search/src/utils/grid.js":"9","/Users/chrischase/Dev/word-search/src/utils/populateGrid.js":"10","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js":"11","/Users/chrischase/Dev/word-search/src/app/store.js":"12","/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js":"13","/Users/chrischase/Dev/word-search/src/features/grid/Grid.js":"14","/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js":"15","/Users/chrischase/Dev/word-search/src/components/Counter.js":"16","/Users/chrischase/Dev/word-search/src/components/playAgainSlice.js":"17"},{"size":627,"mtime":1617523337419,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1611646243558,"results":"20","hashOfConfig":"19"},{"size":1912,"mtime":1621178534046,"results":"21","hashOfConfig":"19"},{"size":387,"mtime":1615493029008,"results":"22","hashOfConfig":"19"},{"size":710,"mtime":1615413730151,"results":"23","hashOfConfig":"19"},{"size":733,"mtime":1613205119390,"results":"24","hashOfConfig":"19"},{"size":168,"mtime":1620053086928,"results":"25","hashOfConfig":"19"},{"size":400,"mtime":1621283048090,"results":"26","hashOfConfig":"19"},{"size":2977,"mtime":1621318598049,"results":"27","hashOfConfig":"19"},{"size":5458,"mtime":1618151273539,"results":"28","hashOfConfig":"19"},{"size":548,"mtime":1620243313725,"results":"29","hashOfConfig":"19"},{"size":390,"mtime":1621160714512,"results":"30","hashOfConfig":"19"},{"size":810,"mtime":1620475415321,"results":"31","hashOfConfig":"19"},{"size":3447,"mtime":1621318598041,"results":"32","hashOfConfig":"19"},{"size":1174,"mtime":1621318598035,"results":"33","hashOfConfig":"19"},{"size":330,"mtime":1621160625742,"results":"34","hashOfConfig":"19"},{"size":449,"mtime":1621177744565,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1rtdojv",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/chrischase/Dev/word-search/src/index.js",[],["75","76"],"/Users/chrischase/Dev/word-search/src/reportWebVitals.js",[],"/Users/chrischase/Dev/word-search/src/App.js",["77","78","79","80","81","82","83","84","85","86","87"],"/Users/chrischase/Dev/word-search/src/components/GridLetter.js",[],"/Users/chrischase/Dev/word-search/src/utils/gridSetup.js",["88","89"],"import Grid from \"./grid\";\nimport PopulateGrid from \"./populateGrid\";\n\n// const wordLocations = [[0, 1, 2], [2, 5, 8]];\n// const directions = ['N', 'E', 'S', 'W'];\n// const rows = 3, columns = 3;\nconst words = [\"FOX\", \"BOX\", \"LOG\", \"FIG\"];\n// const removeDuplicates = (ar                ray) => [...new Set(array)];\n// const flatten = (array) => array.reduce((prev, curr) => prev.concat(curr))\n// const locationIndexes = removeDuplicates(flatten(wordLocations));\n\nconst gridSetup = {\n    getWords: () => words,\n    // getGrid: () => {\n    //     const grid = Grid.setup(rows, columns, words);\n    //     return grid.letters;\n    // },\n    // getWordLocations: () => wordLocations,\n};\n\nexport default gridSetup;","/Users/chrischase/Dev/word-search/src/utils/utils.js",[],"/Users/chrischase/Dev/word-search/src/utils/matching.js",[],"/Users/chrischase/Dev/word-search/src/components/PlayAgain.js",[],"/Users/chrischase/Dev/word-search/src/utils/grid.js",[],"/Users/chrischase/Dev/word-search/src/utils/populateGrid.js",["90","91"],"const PopulateGrid = {\n    getRandomLocation(gridSize) {\n        return Math.floor(Math.random() * gridSize);\n        // return availableLocations[`Math.floor(Math.random() * availableLocations.length)];\n    },\n    getAvailableDirections(failedDirections = []) {\n        // directions can be N E S W\n        // N writes from bottom to top. E writes left to right, S top to bottom, W right to left\n        // TODO add diagonals NE, SE, SW, NW\n        const directions = ['N', 'E', \"S\", 'W'];\n        const availableDirections = directions.filter(d => !failedDirections.includes(d));\n        return availableDirections;\n    },\n    getRandomDirection(directions) {\n        if (directions.length === 1) {\n            return directions[0];\n        }\n        return directions[Math.floor(Math.random() * directions.length)];\n    },\n    // TODO write more tests for this\n    findNextDirection(grid, position, word, directions) {\n        const failedDirections = [];\n        let remainingDirections = directions;\n        // TODO change to forEach\n        for (let i = 0; i <= directions.length; i++) {\n            const candidateDirection = this.getRandomDirection(remainingDirections);\n            const directionOK = this.checkDirections(candidateDirection, grid.rows, grid.columns, position, word.length);\n            if (directionOK) {\n                return candidateDirection;\n            }\n            failedDirections.push(candidateDirection);\n            remainingDirections = this.getAvailableDirections(failedDirections);\n        }\n        return false;\n    },\n    insertWord(grid, position, direction, word) {\n        console.log('insertWord', word);\n        const letters = [...word];\n        let letterLocations = [];\n        let currentPosition = position;\n        let collision = false;\n        for(let i = 0; i < letters.length; i++){\n            if (this.collisionDetections(grid, letters[i], currentPosition)) {\n                collision = true;\n                letterLocations = [];\n            }\n            if (collision) {\n                break;\n            }\n            letterLocations.push(currentPosition);\n            // grid.letters[currentPosition] = letters[i];\n            currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        }\n        // letters.forEach(letter => {\n        //     if (this.collisionDetections(grid, letter, currentPosition)) {\n        //         collision = true;\n        //     }\n        //     if (collision) {\n        //         return\n        //     }\n        //     letterLocations.push(currentPosition);\n        //     grid.letters[currentPosition] = letter;\n        //     currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        // });\n        if (collision) {\n            console.log('collision detected');\n            return false;\n        } else {\n            console.log('no collisions');\n            console.log('adding letters to grid');\n            // TODO use functional method instead of for loop\n            for(let i = 0; i < letters.length; i++) {\n                grid.letters[letterLocations[i]] = letters[i];\n            }\n            console.log('adding to wordLocations', letterLocations );\n            grid.wordLocations.push(letterLocations);\n            console.log('this.words', this.words);\n            grid.words.find(e => e.word === word).location = letterLocations;\n            console.log('words after location added ', grid.words);\n            return true\n        }\n    },\n    collisionDetections(grid, letter, location) {\n        if (grid.locationIndexes.includes(location)) {\n            //if the letters are the same then it's not a collision\n            return letter !== grid.letters[location];\n        }\n    },\n    calculateNextPosition(grid, direction, currentPosition) {\n        switch (direction) {\n            case 'N':\n                return currentPosition - grid.columns;\n            case 'E':\n                return currentPosition + 1;\n            case 'S':\n                return currentPosition + grid.columns;\n            case 'W':\n                return currentPosition - 1;\n\n        }\n    },\n    checkDirections(direction, rows, columns, position, wordLen) {\n        switch (direction) {\n            case 'N':\n                if (position - ((wordLen - 1) * columns) >= 0) {\n                    return true;\n                }\n                return false;\n            case 'E':\n                const rowEnd = position - (position % columns) + (columns - 1);\n                if (position + (wordLen - 1) > rowEnd) {\n                    return false;\n                }\n                return true;\n            case 'S':\n                // TODO which way of doing this is better\n                if (position + ((wordLen - 1) * columns) > (rows * columns) - 1) {\n                    return false;\n                }\n                // const wordEnd = position + ((wordLen - 1) * columns);\n                // const columnEnd = position + ((rows - (Math.floor(position / rows) + 1)) * columns);\n                // if (wordEnd > columnEnd) {\n                //     return false\n                // }\n                return true;\n            case 'W':\n                const rowStart = position - (position % columns);\n                if (position - (wordLen - 1) < rowStart) {\n                    return false\n                }\n                return true;\n        }\n    }\n}\n\n\nexport default PopulateGrid;\n","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js",[],"/Users/chrischase/Dev/word-search/src/app/store.js",[],"/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js",[],"/Users/chrischase/Dev/word-search/src/features/grid/Grid.js",["92","93"],"import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport GridLetter from \"../../components/GridLetter\";\nimport utils from \"../../utils/utils\";\nimport matching from \"../../utils/matching\";\nimport {wordFound} from \"./gridSlice\";\n// import {show} from \"../../components/playAgainSlice\";\nimport gridSetup from \"../../utils/gridSetup\";\n\nexport const Grid = () => {\n    const MATCHED = 'matched';\n    const CANDIDATE = 'candidate';\n    const AVAILABLE = 'available';\n\n    const [foundWordIndexes, setFoundWordIndexes] = useState([]);\n    // letters selected when trying to find a word\n    const [selectedLetters, setSelectedLetters] = useState([]);\n    // contains the id of the letters for words found\n    const [matchedLetters, setMatchedLetters] = useState([]);\n\n    const dispatch = useDispatch();\n    // const letters = useSelector(state => state.grid.letters);\n    const grid = useSelector(state => state.grid);\n    console.log('grid letters', grid.letters);\n    // const letters = useSelector(state => state.grid.letters);\n    // TODO change to use word objects from wordSlice. Is this still correct???\n    const words = gridSetup.getWords;\n    // const words = useSelector(state => state.words);\n\n    const gameComplete = () => {\n        return words.length <= foundWordIndexes.length;\n    }\n\n    const onLetterClick = (id, currentStatus) => {\n        // if(gameComplete()) {\n        //     return;\n        // }\n        console.log('id ', id);\n        console.log('letters ', grid.letters);\n        console.log('workLocations', grid.wordLocations);\n        console.log('on click candidate Letters ', selectedLetters);\n        const updatedSelection = (utils.toggleLetterSelection(id, selectedLetters));\n        console.log('after click candidate letters', updatedSelection);\n        setSelectedLetters(updatedSelection);\n        detectMatches(updatedSelection);\n    };\n\n    const detectMatches = (selectedLetters) => {\n        console.log('selectedLetters', selectedLetters);\n        console.log('locationIndex', grid.locationIndexes);\n        grid.words.forEach((wordData, index) => {\n            console.log('wordData ', wordData);\n            console.log('selection for matching', selectedLetters);\n            if (matching.isMatch(wordData.location, selectedLetters)) {\n                console.log('you got a match');\n                console.log('grid.words', grid.words);\n                if (wordData.found === false) {\n                    dispatch(wordFound(wordData));\n                    const newMatchedLetters = matchedLetters.concat(selectedLetters);\n                    setMatchedLetters(newMatchedLetters);\n                    const newFoundWordIndexes = foundWordIndexes.concat(index);\n                    setFoundWordIndexes(newFoundWordIndexes);\n                    console.log('words length', words.length);\n                    console.log('foundIndexes', newFoundWordIndexes.length);\n                    console.log('matchedLetters', newMatchedLetters);\n                }\n                setSelectedLetters([]);\n            }\n        });\n    };\n\n    const numberStatus = (number) => {\n\n        const candidate = selectedLetters.includes(number);\n        const matched = matchedLetters.includes(number);\n        if (matched && candidate) {\n            return CANDIDATE;\n        }\n        if (matched && !candidate) {\n            return MATCHED;\n        }\n        if (!matched && candidate) {\n            return CANDIDATE;\n        }\n        return AVAILABLE\n    };\n\n    const gridItems = grid.letters.map((letter, index) =>\n        <GridLetter key={index}\n                    letter={letter}\n                    id={index}\n                    status={numberStatus(index)}\n                    onClick={onLetterClick}\n        />\n    )\n\n    return <React.Fragment>{gridItems}</React.Fragment>\n\n}\n\n","/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js",["94"],"import {createSlice} from '@reduxjs/toolkit'\nimport {current} from '@reduxjs/toolkit'\nimport Grid from \"../../utils/grid\";\nimport gridSetup from \"../../utils/gridSetup\";\n\n\nconst gridSlice = createSlice({\n    name: 'grid',\n    initialState: Grid.setup(5,5, gridSetup.getWords()),\n    reducers: {\n        wordFound: (state, action) => {\n            console.log('state', current(state));\n            console.log('state words ', current(state.words));\n            console.log('wordfound action', action);\n            const word = state.words.find(word => word.word === action.payload.word)\n            word.found = true;\n            console.log('false count ', state.words.filter(w => w.found === false).length);\n            if(state.words.filter(w => w.found === false).length === 0){\n                console.log('game completed');\n                state.gameComplete = true;\n            }\n        },\n        setNewState: (state, action) => {\n            console.log('You are setting the grid state');\n            this.state = Grid.setup(5,5, gridSetup.getWords());\n        }\n    }\n})\n\nexport const {wordFound, setNewState} = gridSlice.actions;\nexport default gridSlice.reducer;","/Users/chrischase/Dev/word-search/src/components/Counter.js",[],"/Users/chrischase/Dev/word-search/src/components/playAgainSlice.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":21},{"ruleId":"99","severity":1,"message":"103","line":5,"column":10,"nodeType":"101","messageId":"102","endLine":5,"endColumn":19},{"ruleId":"99","severity":1,"message":"104","line":7,"column":8,"nodeType":"101","messageId":"102","endLine":7,"endColumn":18},{"ruleId":"99","severity":1,"message":"105","line":12,"column":8,"nodeType":"101","messageId":"102","endLine":12,"endColumn":16},{"ruleId":"99","severity":1,"message":"106","line":18,"column":7,"nodeType":"101","messageId":"102","endLine":18,"endColumn":11},{"ruleId":"99","severity":1,"message":"107","line":19,"column":7,"nodeType":"101","messageId":"102","endLine":19,"endColumn":14},{"ruleId":"99","severity":1,"message":"108","line":21,"column":7,"nodeType":"101","messageId":"102","endLine":21,"endColumn":19},{"ruleId":"99","severity":1,"message":"109","line":34,"column":12,"nodeType":"101","messageId":"102","endLine":34,"endColumn":17},{"ruleId":"99","severity":1,"message":"110","line":34,"column":19,"nodeType":"101","messageId":"102","endLine":34,"endColumn":27},{"ruleId":"99","severity":1,"message":"111","line":38,"column":12,"nodeType":"101","messageId":"102","endLine":38,"endColumn":28},{"ruleId":"99","severity":1,"message":"112","line":38,"column":30,"nodeType":"101","messageId":"102","endLine":38,"endColumn":49},{"ruleId":"99","severity":1,"message":"113","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":12},{"ruleId":"99","severity":1,"message":"114","line":2,"column":8,"nodeType":"101","messageId":"102","endLine":2,"endColumn":20},{"ruleId":"115","severity":1,"message":"116","line":90,"column":9,"nodeType":"117","messageId":"118","endLine":100,"endColumn":10},{"ruleId":"115","severity":1,"message":"116","line":103,"column":9,"nodeType":"117","messageId":"118","endLine":132,"endColumn":10},{"ruleId":"99","severity":1,"message":"119","line":7,"column":9,"nodeType":"101","messageId":"102","endLine":7,"endColumn":13},{"ruleId":"99","severity":1,"message":"120","line":30,"column":11,"nodeType":"101","messageId":"102","endLine":30,"endColumn":23},{"ruleId":"99","severity":1,"message":"100","line":5,"column":9,"nodeType":"101","messageId":"102","endLine":5,"endColumn":20},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'wordFound' is defined but never used.","'GridLetter' is defined but never used.","'matching' is defined but never used.","'rows' is assigned a value but never used.","'columns' is assigned a value but never used.","'StarsDisplay' is assigned a value but never used.","'words' is assigned a value but never used.","'setWords' is assigned a value but never used.","'foundWordIndexes' is assigned a value but never used.","'setFoundWordIndexes' is assigned a value but never used.","'Grid' is defined but never used.","'PopulateGrid' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'show' is defined but never used.","'gameComplete' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]