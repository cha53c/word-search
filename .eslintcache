[{"/Users/chrischase/Dev/word-search/src/index.js":"1","/Users/chrischase/Dev/word-search/src/reportWebVitals.js":"2","/Users/chrischase/Dev/word-search/src/App.js":"3","/Users/chrischase/Dev/word-search/src/components/GridLetter.js":"4","/Users/chrischase/Dev/word-search/src/utils/gridSetup.js":"5","/Users/chrischase/Dev/word-search/src/utils/utils.js":"6","/Users/chrischase/Dev/word-search/src/utils/matching.js":"7","/Users/chrischase/Dev/word-search/src/components/PlayAgain.js":"8","/Users/chrischase/Dev/word-search/src/utils/grid.js":"9","/Users/chrischase/Dev/word-search/src/utils/populateGrid.js":"10","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js":"11","/Users/chrischase/Dev/word-search/src/app/store.js":"12","/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js":"13","/Users/chrischase/Dev/word-search/src/features/grid/Grid.js":"14","/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js":"15","/Users/chrischase/Dev/word-search/src/components/Counter.js":"16","/Users/chrischase/Dev/word-search/src/components/counterSlice.js":"17","/Users/chrischase/Dev/word-search/src/components/playAgainSlice.js":"18"},{"size":627,"mtime":1617523337419,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1611646243558,"results":"21","hashOfConfig":"20"},{"size":1865,"mtime":1621086772267,"results":"22","hashOfConfig":"20"},{"size":387,"mtime":1615493029008,"results":"23","hashOfConfig":"20"},{"size":710,"mtime":1615413730151,"results":"24","hashOfConfig":"20"},{"size":733,"mtime":1613205119390,"results":"25","hashOfConfig":"20"},{"size":168,"mtime":1620053086928,"results":"26","hashOfConfig":"20"},{"size":274,"mtime":1621097414697,"results":"27","hashOfConfig":"20"},{"size":3066,"mtime":1618081142444,"results":"28","hashOfConfig":"20"},{"size":5458,"mtime":1618151273539,"results":"29","hashOfConfig":"20"},{"size":548,"mtime":1620243313725,"results":"30","hashOfConfig":"20"},{"size":479,"mtime":1621097394484,"results":"31","hashOfConfig":"20"},{"size":810,"mtime":1620475415321,"results":"32","hashOfConfig":"20"},{"size":4232,"mtime":1620566307911,"results":"33","hashOfConfig":"20"},{"size":1049,"mtime":1621084871880,"results":"34","hashOfConfig":"20"},{"size":298,"mtime":1621088159151,"results":"35","hashOfConfig":"20"},{"size":621,"mtime":1620492831100,"results":"36","hashOfConfig":"20"},{"size":296,"mtime":1621099010974,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1rtdojv",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chrischase/Dev/word-search/src/index.js",[],["79","80"],"/Users/chrischase/Dev/word-search/src/reportWebVitals.js",[],"/Users/chrischase/Dev/word-search/src/App.js",["81","82","83","84","85","86","87","88","89","90","91"],"import './App.css';\nimport React, {useState} from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { wordFound } from \"./features/words/wordsSlice\";\n\nimport GridLetter from \"./components/GridLetter\";\nimport Counter from \"./components/Counter\";\nimport PlayAgain from \"./components/PlayAgain\";\n\nimport utils from \"./utils/utils\";\nimport matching from \"./utils/matching\";\nimport gridSetup from \"./utils/gridSetup\";\n// import Grid from \"./utils/grid\";\nimport {WordsList} from \"./features/words/WordsList\";\nimport {Grid} from \"./features/grid/Grid\"\n\nconst rows = 5;\nconst columns = 5;\n\nconst StarsDisplay = props => (\n    <>\n        {utils.range(1, props.count).map(starId => <div key={starId} className=\"star\"/>)}\n    </>\n);\n\n\nfunction App() {\n    // const MATCHED = 'matched';\n    // const CANDIDATE = 'candidate';\n    // const AVAILABLE = 'available';\n    // const dispatch = useDispatch();\n    // const [newGame, setNewGame] = useState(true);\n    const [words, setWords] = useState(gridSetup.getWords);\n    // const [grid, setGrid] = useState(Grid.setup(rows, columns, words));\n    // console.log('grid ', grid );\n    // indexes from wordLocations of the words found\n    const [foundWordIndexes, setFoundWordIndexes] = useState([]);\n    // letters selected when trying to find a word\n\n\n\n\n\n\n    return (\n        <div className=\"game\">\n            <div className=\"help\">\n                Click on the letters to find the words\n            </div>\n            <div className=\"body\">\n                <div className=\"left\">\n                    <Counter />\n                    <PlayAgain />\n                    <WordsList />\n                </div>\n                <div className=\"right\">\n                    <Grid />\n                </div>\n            </div>\n            <div className=\"timer\">Time Remaining: 10</div>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/chrischase/Dev/word-search/src/components/GridLetter.js",[],"/Users/chrischase/Dev/word-search/src/utils/gridSetup.js",["92","93"],"import Grid from \"./grid\";\nimport PopulateGrid from \"./populateGrid\";\n\n// const wordLocations = [[0, 1, 2], [2, 5, 8]];\n// const directions = ['N', 'E', 'S', 'W'];\n// const rows = 3, columns = 3;\nconst words = [\"FOX\", \"BOX\", \"LOG\", \"FIG\"];\n// const removeDuplicates = (ar                ray) => [...new Set(array)];\n// const flatten = (array) => array.reduce((prev, curr) => prev.concat(curr))\n// const locationIndexes = removeDuplicates(flatten(wordLocations));\n\nconst gridSetup = {\n    getWords: () => words,\n    // getGrid: () => {\n    //     const grid = Grid.setup(rows, columns, words);\n    //     return grid.letters;\n    // },\n    // getWordLocations: () => wordLocations,\n};\n\nexport default gridSetup;","/Users/chrischase/Dev/word-search/src/utils/utils.js",[],"/Users/chrischase/Dev/word-search/src/utils/matching.js",[],"/Users/chrischase/Dev/word-search/src/components/PlayAgain.js",[],"/Users/chrischase/Dev/word-search/src/utils/grid.js",[],"/Users/chrischase/Dev/word-search/src/utils/populateGrid.js",["94","95"],"const PopulateGrid = {\n    getRandomLocation(gridSize) {\n        return Math.floor(Math.random() * gridSize);\n        // return availableLocations[`Math.floor(Math.random() * availableLocations.length)];\n    },\n    getAvailableDirections(failedDirections = []) {\n        // directions can be N E S W\n        // N writes from bottom to top. E writes left to right, S top to bottom, W right to left\n        // TODO add diagonals NE, SE, SW, NW\n        const directions = ['N', 'E', \"S\", 'W'];\n        const availableDirections = directions.filter(d => !failedDirections.includes(d));\n        return availableDirections;\n    },\n    getRandomDirection(directions) {\n        if (directions.length === 1) {\n            return directions[0];\n        }\n        return directions[Math.floor(Math.random() * directions.length)];\n    },\n    // TODO write more tests for this\n    findNextDirection(grid, position, word, directions) {\n        const failedDirections = [];\n        let remainingDirections = directions;\n        // TODO change to forEach\n        for (let i = 0; i <= directions.length; i++) {\n            const candidateDirection = this.getRandomDirection(remainingDirections);\n            const directionOK = this.checkDirections(candidateDirection, grid.rows, grid.columns, position, word.length);\n            if (directionOK) {\n                return candidateDirection;\n            }\n            failedDirections.push(candidateDirection);\n            remainingDirections = this.getAvailableDirections(failedDirections);\n        }\n        return false;\n    },\n    insertWord(grid, position, direction, word) {\n        console.log('insertWord', word);\n        const letters = [...word];\n        let letterLocations = [];\n        let currentPosition = position;\n        let collision = false;\n        for(let i = 0; i < letters.length; i++){\n            if (this.collisionDetections(grid, letters[i], currentPosition)) {\n                collision = true;\n                letterLocations = [];\n            }\n            if (collision) {\n                break;\n            }\n            letterLocations.push(currentPosition);\n            // grid.letters[currentPosition] = letters[i];\n            currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        }\n        // letters.forEach(letter => {\n        //     if (this.collisionDetections(grid, letter, currentPosition)) {\n        //         collision = true;\n        //     }\n        //     if (collision) {\n        //         return\n        //     }\n        //     letterLocations.push(currentPosition);\n        //     grid.letters[currentPosition] = letter;\n        //     currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        // });\n        if (collision) {\n            console.log('collision detected');\n            return false;\n        } else {\n            console.log('no collisions');\n            console.log('adding letters to grid');\n            // TODO use functional method instead of for loop\n            for(let i = 0; i < letters.length; i++) {\n                grid.letters[letterLocations[i]] = letters[i];\n            }\n            console.log('adding to wordLocations', letterLocations );\n            grid.wordLocations.push(letterLocations);\n            console.log('this.words', this.words);\n            grid.words.find(e => e.word === word).location = letterLocations;\n            console.log('words after location added ', grid.words);\n            return true\n        }\n    },\n    collisionDetections(grid, letter, location) {\n        if (grid.locationIndexes.includes(location)) {\n            //if the letters are the same then it's not a collision\n            return letter !== grid.letters[location];\n        }\n    },\n    calculateNextPosition(grid, direction, currentPosition) {\n        switch (direction) {\n            case 'N':\n                return currentPosition - grid.columns;\n            case 'E':\n                return currentPosition + 1;\n            case 'S':\n                return currentPosition + grid.columns;\n            case 'W':\n                return currentPosition - 1;\n\n        }\n    },\n    checkDirections(direction, rows, columns, position, wordLen) {\n        switch (direction) {\n            case 'N':\n                if (position - ((wordLen - 1) * columns) >= 0) {\n                    return true;\n                }\n                return false;\n            case 'E':\n                const rowEnd = position - (position % columns) + (columns - 1);\n                if (position + (wordLen - 1) > rowEnd) {\n                    return false;\n                }\n                return true;\n            case 'S':\n                // TODO which way of doing this is better\n                if (position + ((wordLen - 1) * columns) > (rows * columns) - 1) {\n                    return false;\n                }\n                // const wordEnd = position + ((wordLen - 1) * columns);\n                // const columnEnd = position + ((rows - (Math.floor(position / rows) + 1)) * columns);\n                // if (wordEnd > columnEnd) {\n                //     return false\n                // }\n                return true;\n            case 'W':\n                const rowStart = position - (position % columns);\n                if (position - (wordLen - 1) < rowStart) {\n                    return false\n                }\n                return true;\n        }\n    }\n}\n\n\nexport default PopulateGrid;\n","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js",[],"/Users/chrischase/Dev/word-search/src/app/store.js",[],"/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js",[],"/Users/chrischase/Dev/word-search/src/features/grid/Grid.js",["96"],"import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport GridLetter from \"../../components/GridLetter\";\nimport utils from \"../../utils/utils\";\nimport matching from \"../../utils/matching\";\nimport {wordFound} from \"./gridSlice\";\nimport {incrementFound} from \"../../components/counterSlice\";\nimport gridSetup from \"../../utils/gridSetup\";\n\nexport const Grid = () => {\n    const MATCHED = 'matched';\n    const CANDIDATE = 'candidate';\n    const AVAILABLE = 'available';\n\n    const [foundWordIndexes, setFoundWordIndexes] = useState([]);\n    // letters selected when trying to find a word\n    const [selectedLetters, setSelectedLetters] = useState([]);\n    // contains the id of the letters for words found\n    const [matchedLetters, setMatchedLetters] = useState([]);\n\n    const dispatch = useDispatch();\n    // const letters = useSelector(state => state.grid.letters);\n    const grid = useSelector(state => state.grid);\n    console.log('grid letters', grid.letters);\n    // const letters = useSelector(state => state.grid.letters);\n    // TODO change to use word objects from wordSlice. Is this still correct???\n    const words = gridSetup.getWords;\n    // const words = useSelector(state => state.words);\n\n    const gameComplete = () => {\n        return words.length <= foundWordIndexes.length;\n    }\n\n    const onLetterClick = (id, currentStatus) => {\n        // if(gameComplete()) {\n        //     return;\n        // }\n        console.log('id ', id);\n        console.log('letters ', grid.letters);\n        console.log('workLocations', grid.wordLocations);\n        console.log('on click candidate Letters ', selectedLetters);\n        const updatedSelection = (utils.toggleLetterSelection(id, selectedLetters));\n        console.log('after click candidate letters', updatedSelection);\n        setSelectedLetters(updatedSelection);\n        detectMatches(updatedSelection);\n    };\n\n    const detectMatches = (selectedLetters) => {\n        console.log('selectedLetters', selectedLetters);\n        console.log('locationIndex', grid.locationIndexes);\n        grid.words.forEach((wordData, index) => {\n            console.log('wordData ', wordData);\n            console.log('selection for matching', selectedLetters);\n            if (matching.isMatch(wordData.location, selectedLetters)) {\n                console.log('you got a match');\n                console.log('grid.words', grid.words);\n                if (wordData.found === false) {\n                    dispatch(wordFound(wordData));\n                    dispatch(incrementFound());\n                    const newMatchedLetters = matchedLetters.concat(selectedLetters);\n                    setMatchedLetters(newMatchedLetters);\n                    const newFoundWordIndexes = foundWordIndexes.concat(index);\n                    setFoundWordIndexes(newFoundWordIndexes);\n                    console.log('words length', words.length);\n                    console.log('foundIndexes', newFoundWordIndexes.length);\n                    console.log('matchedLetters', newMatchedLetters);\n                }\n                setSelectedLetters([]);\n            }\n        });\n        // console.log('false count ', grid.words.filter(w => w.found === false).length);\n        // if(grid.words.filter(w => w.found === false).length === 0){\n        //     console.log('game over');\n        //     // TODO dispatch congratulations component\n        //     // TODO dispatch to new game button\n        // }\n    };\n\n    const numberStatus = (number) => {\n\n        const candidate = selectedLetters.includes(number);\n        const matched = matchedLetters.includes(number);\n        if (matched && candidate) {\n            return CANDIDATE;\n        }\n        if (matched && !candidate) {\n            return MATCHED;\n        }\n        if (!matched && candidate) {\n            return CANDIDATE;\n        }\n        return AVAILABLE\n    };\n\n    const gridItems = grid.letters.map((letter, index) =>\n        <GridLetter key={index}\n                    letter={letter}\n                    id={index}\n                    status={numberStatus(index)}\n                    onClick={onLetterClick}\n        />\n    )\n\n    return <React.Fragment>{gridItems}</React.Fragment>\n\n}\n\n","/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js",[],"/Users/chrischase/Dev/word-search/src/components/Counter.js",[],"/Users/chrischase/Dev/word-search/src/components/counterSlice.js",[],"/Users/chrischase/Dev/word-search/src/components/playAgainSlice.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":3,"column":10,"nodeType":"103","messageId":"104","endLine":3,"endColumn":21},{"ruleId":"101","severity":1,"message":"105","line":4,"column":10,"nodeType":"103","messageId":"104","endLine":4,"endColumn":19},{"ruleId":"101","severity":1,"message":"106","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":18},{"ruleId":"101","severity":1,"message":"107","line":11,"column":8,"nodeType":"103","messageId":"104","endLine":11,"endColumn":16},{"ruleId":"101","severity":1,"message":"108","line":17,"column":7,"nodeType":"103","messageId":"104","endLine":17,"endColumn":11},{"ruleId":"101","severity":1,"message":"109","line":18,"column":7,"nodeType":"103","messageId":"104","endLine":18,"endColumn":14},{"ruleId":"101","severity":1,"message":"110","line":20,"column":7,"nodeType":"103","messageId":"104","endLine":20,"endColumn":19},{"ruleId":"101","severity":1,"message":"111","line":33,"column":12,"nodeType":"103","messageId":"104","endLine":33,"endColumn":17},{"ruleId":"101","severity":1,"message":"112","line":33,"column":19,"nodeType":"103","messageId":"104","endLine":33,"endColumn":27},{"ruleId":"101","severity":1,"message":"113","line":37,"column":12,"nodeType":"103","messageId":"104","endLine":37,"endColumn":28},{"ruleId":"101","severity":1,"message":"114","line":37,"column":30,"nodeType":"103","messageId":"104","endLine":37,"endColumn":49},{"ruleId":"101","severity":1,"message":"115","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":12},{"ruleId":"101","severity":1,"message":"116","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":20},{"ruleId":"117","severity":1,"message":"118","line":90,"column":9,"nodeType":"119","messageId":"120","endLine":100,"endColumn":10},{"ruleId":"117","severity":1,"message":"118","line":103,"column":9,"nodeType":"119","messageId":"120","endLine":132,"endColumn":10},{"ruleId":"101","severity":1,"message":"121","line":30,"column":11,"nodeType":"103","messageId":"104","endLine":30,"endColumn":23},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'wordFound' is defined but never used.","'GridLetter' is defined but never used.","'matching' is defined but never used.","'rows' is assigned a value but never used.","'columns' is assigned a value but never used.","'StarsDisplay' is assigned a value but never used.","'words' is assigned a value but never used.","'setWords' is assigned a value but never used.","'foundWordIndexes' is assigned a value but never used.","'setFoundWordIndexes' is assigned a value but never used.","'Grid' is defined but never used.","'PopulateGrid' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'gameComplete' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]