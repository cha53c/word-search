[{"/Users/chrischase/Dev/word-search/src/index.js":"1","/Users/chrischase/Dev/word-search/src/reportWebVitals.js":"2","/Users/chrischase/Dev/word-search/src/App.js":"3","/Users/chrischase/Dev/word-search/src/components/GridLetter.js":"4","/Users/chrischase/Dev/word-search/src/utils/gridSetup.js":"5","/Users/chrischase/Dev/word-search/src/utils/utils.js":"6","/Users/chrischase/Dev/word-search/src/utils/matching.js":"7","/Users/chrischase/Dev/word-search/src/components/PlayAgain.js":"8","/Users/chrischase/Dev/word-search/src/utils/grid.js":"9","/Users/chrischase/Dev/word-search/src/utils/populateGrid.js":"10","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js":"11","/Users/chrischase/Dev/word-search/src/app/store.js":"12","/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js":"13","/Users/chrischase/Dev/word-search/src/features/grid/Grid.js":"14","/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js":"15","/Users/chrischase/Dev/word-search/src/components/Counter.js":"16","/Users/chrischase/Dev/word-search/src/components/playAgainSlice.js":"17"},{"size":627,"mtime":1617523337419,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1611646243558,"results":"20","hashOfConfig":"19"},{"size":1667,"mtime":1621511723647,"results":"21","hashOfConfig":"19"},{"size":940,"mtime":1621855249044,"results":"22","hashOfConfig":"19"},{"size":2756,"mtime":1621890235257,"results":"23","hashOfConfig":"19"},{"size":1307,"mtime":1621665317583,"results":"24","hashOfConfig":"19"},{"size":168,"mtime":1620053086928,"results":"25","hashOfConfig":"19"},{"size":552,"mtime":1621838935647,"results":"26","hashOfConfig":"19"},{"size":417,"mtime":1622052587315,"results":"27","hashOfConfig":"19"},{"size":5442,"mtime":1621888046307,"results":"28","hashOfConfig":"19"},{"size":548,"mtime":1620243313725,"results":"29","hashOfConfig":"19"},{"size":390,"mtime":1621854639486,"results":"30","hashOfConfig":"19"},{"size":810,"mtime":1620475415321,"results":"31","hashOfConfig":"19"},{"size":2058,"mtime":1621888046325,"results":"32","hashOfConfig":"19"},{"size":1799,"mtime":1621855660725,"results":"33","hashOfConfig":"19"},{"size":330,"mtime":1621160625742,"results":"34","hashOfConfig":"19"},{"size":449,"mtime":1621177744565,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1rtdojv",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/chrischase/Dev/word-search/src/index.js",[],["73","74"],"/Users/chrischase/Dev/word-search/src/reportWebVitals.js",[],"/Users/chrischase/Dev/word-search/src/App.js",["75","76","77","78","79","80","81","82"],"/Users/chrischase/Dev/word-search/src/components/GridLetter.js",[],"/Users/chrischase/Dev/word-search/src/utils/gridSetup.js",[],"/Users/chrischase/Dev/word-search/src/utils/utils.js",[],"/Users/chrischase/Dev/word-search/src/utils/matching.js",[],"/Users/chrischase/Dev/word-search/src/components/PlayAgain.js",["83"],"/Users/chrischase/Dev/word-search/src/utils/grid.js",[],"/Users/chrischase/Dev/word-search/src/utils/populateGrid.js",["84","85"],"import utils from \"./utils\";\n\nconst PopulateGrid = {\n    getRandomLocation(gridSize) {\n        return Math.floor(Math.random() * gridSize);\n        // return availableLocations[`Math.floor(Math.random() * availableLocations.length)];\n    },\n    getAvailableDirections(failedDirections = []) {\n        // directions can be N E S W\n        // N writes from bottom to top. E writes left to right, S top to bottom, W right to left\n        // TODO add diagonals NE, SE, SW, NW\n        const directions = ['N', 'E', \"S\", 'W'];\n        const availableDirections = directions.filter(d => !failedDirections.includes(d));\n        return availableDirections;\n    },\n    getRandomDirection(directions) {\n        if (directions.length === 1) {\n            return directions[0];\n        }\n        return directions[Math.floor(Math.random() * directions.length)];\n    },\n    // TODO write more tests for this\n    findNextDirection(grid, position, word, directions) {\n        const failedDirections = [];\n        let remainingDirections = directions;\n        // TODO change to forEach\n        for (let i = 0; i <= directions.length; i++) {\n            const candidateDirection = this.getRandomDirection(remainingDirections);\n            const directionOK = this.checkDirections(candidateDirection, grid.rows, grid.columns, position, word.length);\n            if (directionOK) {\n                return candidateDirection;\n            }\n            failedDirections.push(candidateDirection);\n            remainingDirections = this.getAvailableDirections(failedDirections);\n        }\n        return false;\n    },\n    insertWord(grid, position, direction, word) {\n        console.log('insertWord', word);\n        const letters = [...word];\n        let letterLocations = [];\n        let currentPosition = position;\n        let collision = false;\n        for(let i = 0; i < letters.length; i++){\n            if (this.collisionDetections(grid, letters[i], currentPosition)) {\n                collision = true;\n                letterLocations = [];\n            }\n            if (collision) {\n                break;\n            }\n            letterLocations.push(currentPosition);\n            // grid.letters[currentPosition] = letters[i];\n            currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        }\n        // letters.forEach(letter => {\n        //     if (this.collisionDetections(grid, letter, currentPosition)) {\n        //         collision = true;\n        //     }\n        //     if (collision) {\n        //         return\n        //     }\n        //     letterLocations.push(currentPosition);\n        //     grid.letters[currentPosition] = letter;\n        //     currentPosition = this.calculateNextPosition(grid, direction, currentPosition);\n        // });\n        if (collision) {\n            console.log('collision detected');\n            return false;\n        } else {\n            console.log('no collisions');\n            console.log('adding letters to grid');\n            // TODO use functional method instead of for loop\n            for(let i = 0; i < letters.length; i++) {\n                grid.letters[letterLocations[i]] = letters[i];\n            }\n            console.log('this.words', grid.words);\n            grid.words.find(e => e.word === word).location = letterLocations;\n            console.log('words after location added ', grid.words);\n            return true\n        }\n    },\n    collisionDetections(grid, letter, location) {\n        const locationIndexes = utils.removeDuplicates(utils.flatten(grid.words));\n        // if (grid.locationIndexes.includes(location)) {\n        if (locationIndexes.includes(location)) {\n            //if the letters are the same then it's not a collision\n            return letter !== grid.letters[location];\n        }\n    },\n    calculateNextPosition(grid, direction, currentPosition) {\n        switch (direction) {\n            case 'N':\n                return currentPosition - grid.columns;\n            case 'E':\n                return currentPosition + 1;\n            case 'S':\n                return currentPosition + grid.columns;\n            case 'W':\n                return currentPosition - 1;\n\n        }\n    },\n    checkDirections(direction, rows, columns, position, wordLen) {\n        switch (direction) {\n            case 'N':\n                if (position - ((wordLen - 1) * columns) >= 0) {\n                    return true;\n                }\n                return false;\n            case 'E':\n                const rowEnd = position - (position % columns) + (columns - 1);\n                if (position + (wordLen - 1) > rowEnd) {\n                    return false;\n                }\n                return true;\n            case 'S':\n                // TODO which way of doing this is better\n                if (position + ((wordLen - 1) * columns) > (rows * columns) - 1) {\n                    return false;\n                }\n                // const wordEnd = position + ((wordLen - 1) * columns);\n                // const columnEnd = position + ((rows - (Math.floor(position / rows) + 1)) * columns);\n                // if (wordEnd > columnEnd) {\n                //     return false\n                // }\n                return true;\n            case 'W':\n                const rowStart = position - (position % columns);\n                if (position - (wordLen - 1) < rowStart) {\n                    return false\n                }\n                return true;\n        }\n    }\n}\n\n\nexport default PopulateGrid;\n","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js",[],"/Users/chrischase/Dev/word-search/src/app/store.js",[],"/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js",[],"/Users/chrischase/Dev/word-search/src/features/grid/Grid.js",[],"/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js",["86"],"import {createSlice} from '@reduxjs/toolkit'\nimport {current} from '@reduxjs/toolkit'\nimport Grid from \"../../utils/grid\";\n\n\nconst gridSlice = createSlice({\n    name: 'grid',\n    initialState: Grid.buildNewGrid(5, 5),\n    reducers: {\n        wordFound: (state, action) => {\n            console.log('state', current(state));\n            console.log('state words ', current(state.words));\n            console.log('wordfound action', action);\n            const word = state.words.find(word => word.word === action.payload.word)\n            word.found = true;\n            console.log('false count ', state.words.filter(w => w.found === false).length);\n            if (state.words.filter(w => w.found === false).length === 0) {\n                console.log('game completed');\n                state.gameComplete = true;\n            }\n        },\n        setSelectedLetters: (state, action) => {\n            state.selectedLocations = action.payload.updatedLocations;\n        },\n        resetSelectedLetters: (state) => {\n            state.selectedLocations = [];\n            console.log('resetSelectedLetters', state.selectedLocations);\n        },\n        setNewState: (state, action) => {\n            console.log('You are setting the grid state');\n            const newGrid = Grid.buildNewGrid(5, 5);\n            state.rows = newGrid.rows;\n            state.columns = newGrid.columns;\n            state.size = newGrid.size;\n            state.letters = newGrid.letters;\n            state.gameComplete = false;\n            state.words = newGrid.words;\n            state.locationIndexes = newGrid.locationIndexes;\n            state.selectedLocations = [];\n        }\n    }\n})\n\nexport const {resetSelectedLetters, setSelectedLetters, wordFound, setNewState} = gridSlice.actions;\nexport default gridSlice.reducer;","/Users/chrischase/Dev/word-search/src/components/Counter.js",[],"/Users/chrischase/Dev/word-search/src/components/playAgainSlice.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":4,"column":10,"nodeType":"93","messageId":"94","endLine":4,"endColumn":19},{"ruleId":"91","severity":1,"message":"95","line":13,"column":7,"nodeType":"93","messageId":"94","endLine":13,"endColumn":11},{"ruleId":"91","severity":1,"message":"96","line":14,"column":7,"nodeType":"93","messageId":"94","endLine":14,"endColumn":14},{"ruleId":"91","severity":1,"message":"97","line":16,"column":7,"nodeType":"93","messageId":"94","endLine":16,"endColumn":19},{"ruleId":"91","severity":1,"message":"98","line":29,"column":12,"nodeType":"93","messageId":"94","endLine":29,"endColumn":17},{"ruleId":"91","severity":1,"message":"99","line":29,"column":19,"nodeType":"93","messageId":"94","endLine":29,"endColumn":27},{"ruleId":"91","severity":1,"message":"100","line":32,"column":12,"nodeType":"93","messageId":"94","endLine":32,"endColumn":28},{"ruleId":"91","severity":1,"message":"101","line":32,"column":30,"nodeType":"93","messageId":"94","endLine":32,"endColumn":49},{"ruleId":"91","severity":1,"message":"102","line":4,"column":9,"nodeType":"93","messageId":"94","endLine":4,"endColumn":13},{"ruleId":"103","severity":1,"message":"104","line":88,"column":9,"nodeType":"105","messageId":"106","endLine":98,"endColumn":10},{"ruleId":"103","severity":1,"message":"104","line":101,"column":9,"nodeType":"105","messageId":"106","endLine":130,"endColumn":10},{"ruleId":"91","severity":1,"message":"107","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":13},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'wordFound' is defined but never used.","Identifier","unusedVar","'rows' is assigned a value but never used.","'columns' is assigned a value but never used.","'StarsDisplay' is assigned a value but never used.","'words' is assigned a value but never used.","'setWords' is assigned a value but never used.","'foundWordIndexes' is assigned a value but never used.","'setFoundWordIndexes' is assigned a value but never used.","'Grid' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'utils' is defined but never used.","no-global-assign","no-unsafe-negation"]