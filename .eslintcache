[{"/Users/chrischase/Dev/word-search/src/index.js":"1","/Users/chrischase/Dev/word-search/src/reportWebVitals.js":"2","/Users/chrischase/Dev/word-search/src/App.js":"3","/Users/chrischase/Dev/word-search/src/components/GridLetter.js":"4","/Users/chrischase/Dev/word-search/src/utils/gridSetup.js":"5","/Users/chrischase/Dev/word-search/src/utils/utils.js":"6","/Users/chrischase/Dev/word-search/src/utils/matching.js":"7","/Users/chrischase/Dev/word-search/src/components/PlayAgain.js":"8","/Users/chrischase/Dev/word-search/src/utils/grid.js":"9","/Users/chrischase/Dev/word-search/src/utils/populateGrid.js":"10","/Users/chrischase/Dev/word-search/src/features/words/WordsList.js":"11","/Users/chrischase/Dev/word-search/src/app/store.js":"12","/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js":"13","/Users/chrischase/Dev/word-search/src/features/grid/Grid.js":"14","/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js":"15","/Users/chrischase/Dev/word-search/src/components/Counter.js":"16","/Users/chrischase/Dev/word-search/src/components/playAgainSlice.js":"17"},{"size":627,"mtime":1617523337419,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1611646243558,"results":"20","hashOfConfig":"19"},{"size":1859,"mtime":1621405598746,"results":"21","hashOfConfig":"19"},{"size":387,"mtime":1615493029008,"results":"22","hashOfConfig":"19"},{"size":2944,"mtime":1621492249884,"results":"23","hashOfConfig":"19"},{"size":867,"mtime":1621405192304,"results":"24","hashOfConfig":"19"},{"size":168,"mtime":1620053086928,"results":"25","hashOfConfig":"19"},{"size":400,"mtime":1621283048090,"results":"26","hashOfConfig":"19"},{"size":3080,"mtime":1621492605215,"results":"27","hashOfConfig":"19"},{"size":5334,"mtime":1621425189405,"results":"28","hashOfConfig":"19"},{"size":548,"mtime":1620243313725,"results":"29","hashOfConfig":"19"},{"size":390,"mtime":1621160714512,"results":"30","hashOfConfig":"19"},{"size":810,"mtime":1620475415321,"results":"31","hashOfConfig":"19"},{"size":3430,"mtime":1621493429043,"results":"32","hashOfConfig":"19"},{"size":1521,"mtime":1621493429032,"results":"33","hashOfConfig":"19"},{"size":330,"mtime":1621160625742,"results":"34","hashOfConfig":"19"},{"size":449,"mtime":1621177744565,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1rtdojv",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/chrischase/Dev/word-search/src/index.js",[],["73","74"],"/Users/chrischase/Dev/word-search/src/reportWebVitals.js",[],"/Users/chrischase/Dev/word-search/src/App.js",["75","76","77","78","79","80","81","82","83","84","85"],"/Users/chrischase/Dev/word-search/src/components/GridLetter.js",[],"/Users/chrischase/Dev/word-search/src/utils/gridSetup.js",["86"],"import Grid from \"./grid\";\nimport {directions} from \"./grid\"\nimport PopulateGrid from \"./populateGrid\";\nimport utils from \"./utils\";\n\n// const directions = ['N', 'E', 'S', 'W'];\n// const rows = 3, columns = 3;\nconst words = [\"FOX\", \"BOX\", \"LOG\", \"FIG\"];\n\nconst gridSetup = {\n    getWords: () => words,\n    createBlankGrid: (rows, columns) => {\n        console.log('createBlankGrid');\n        const grid = {};\n        grid.rows = rows;\n        grid.columns = columns;\n        grid.size = rows * columns; // TODO do I need this? can it just be calculated each time?\n        grid.letters = new Array(rows * columns).fill('-');\n        grid.gameComplete = false;\n        grid.words = [];\n        grid.locationIndexes = [];\n        return grid;\n    },\n    setWords: (grid, words) => {\n        grid.words = words.map(word => {\n            return {word: word, location: [], found: false}\n        });\n        return grid;\n    },\n    insertWordsIntoGrid:  (grid, words) => {\n        // TODO iterate over list of words\n        grid.words = words.map(word => {\n            return {word: word, location: [], found: false}\n        });\n        console.log('populateWords');\n        const size = grid.rows * grid.columns;\n        for (let i = 0; i < words.length; i++) {\n            let word = words[i];\n            let directionFound = false;\n            let nextLocation;\n            let nextDirection;\n            let insertUnsuccessful = true;\n            let attempts = 0;\n            while (insertUnsuccessful && (attempts++ < size)) {\n                console.log('attempts', attempts);\n                while (directionFound === false) {\n                    console.log('grid size', size);\n                    nextLocation = PopulateGrid.getRandomLocation(size);\n                    console.log('nextLocation', nextLocation);\n                    nextDirection = PopulateGrid.findNextDirection(grid, nextLocation, word, directions);\n                    console.log('nextDirection', nextDirection);\n                    directionFound = nextDirection;\n                }\n                directionFound = false;\n                console.log('word ', word);\n                let inserted = PopulateGrid.insertWord(grid, nextLocation, nextDirection, word);\n                console.log('letters ', grid.letters);\n                // TODO retry word if it can't be inserted\n                if (inserted) {\n                    grid.locationIndexes = utils.removeDuplicates(utils.flatten(grid.words));\n                    insertUnsuccessful = false;\n                }\n                console.log('locationIndexes', grid.locationIndexes);\n            }\n        }\n        return grid;\n    },\n    fillBlanks: (grid) => {\n        grid.letters = grid.letters\n            .map((e, i) => grid.locationIndexes.includes(i) ? e : utils.randomLetter());\n        console.log('letters after filling blanks', grid.letters);\n        return grid;\n    },\n};\n\nexport default gridSetup;","/Users/chrischase/Dev/word-search/src/utils/utils.js",[],"/Users/chrischase/Dev/word-search/src/utils/matching.js",[],"/Users/chrischase/Dev/word-search/src/components/PlayAgain.js",[],"/Users/chrischase/Dev/word-search/src/utils/grid.js",[],"/Users/chrischase/Dev/word-search/src/utils/populateGrid.js",["87","88"],"/Users/chrischase/Dev/word-search/src/features/words/WordsList.js",[],"/Users/chrischase/Dev/word-search/src/app/store.js",[],"/Users/chrischase/Dev/word-search/src/features/words/wordsSlice.js",[],"/Users/chrischase/Dev/word-search/src/features/grid/Grid.js",["89","90"],"import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport GridLetter from \"../../components/GridLetter\";\nimport utils from \"../../utils/utils\";\nimport matching from \"../../utils/matching\";\nimport {wordFound} from \"./gridSlice\";\n// import {show} from \"../../components/playAgainSlice\";\nimport gridSetup from \"../../utils/gridSetup\";\n\nexport const Grid = () => {\n    const MATCHED = 'matched';\n    const CANDIDATE = 'candidate';\n    const AVAILABLE = 'available';\n\n    const [foundWordIndexes, setFoundWordIndexes] = useState([]);\n    // letters selected when trying to find a word\n    const [selectedLetters, setSelectedLetters] = useState([]);\n    // contains the id of the letters for words found\n    const [matchedLetters, setMatchedLetters] = useState([]);\n\n    const dispatch = useDispatch();\n    // const letters = useSelector(state => state.grid.letters);\n    const grid = useSelector(state => state.grid);\n    console.log('grid letters', grid.letters);\n    // const letters = useSelector(state => state.grid.letters);\n    // TODO change to use word objects from wordSlice. Is this still correct???\n    const words = gridSetup.getWords;\n    // const words = useSelector(state => state.words);\n\n    const gameComplete = () => {\n        return words.length <= foundWordIndexes.length;\n    }\n\n    const onLetterClick = (id, currentStatus) => {\n        // if(gameComplete()) {\n        //     return;\n        // }\n        console.log('id ', id);\n        console.log('letters ', grid.letters);\n        console.log('workLocations', grid.wordLocations);\n        console.log('on click candidate Letters ', selectedLetters);\n        const updatedSelection = (utils.toggleLetterSelection(id, selectedLetters));\n        console.log('after click candidate letters', updatedSelection);\n        setSelectedLetters(updatedSelection);\n        detectMatches(updatedSelection);\n    };\n\n    const detectMatches = (selectedLetters) => {\n        console.log('selectedLetters', selectedLetters);\n        console.log('locationIndex', grid.locationIndexes);\n        grid.words.forEach((wordData, index) => {\n            console.log('wordData ', wordData);\n            console.log('selection for matching', selectedLetters);\n            if (matching.isMatch(wordData.location, selectedLetters)) {\n                console.log('you got a match');\n                console.log('grid.words', grid.words);\n                if (wordData.found === false) {\n                    dispatch(wordFound(wordData));\n                    const newMatchedLetters = matchedLetters.concat(selectedLetters);\n                    setMatchedLetters(newMatchedLetters);\n                    const newFoundWordIndexes = foundWordIndexes.concat(index);\n                    setFoundWordIndexes(newFoundWordIndexes);\n                    console.log('words length', words.length);\n                    console.log('foundIndexes', newFoundWordIndexes.length);\n                    console.log('matchedLetters', newMatchedLetters);\n                }\n                setSelectedLetters([]);\n            }\n        });\n    };\n\n    const numberStatus = (number) => {\n\n        const candidate = selectedLetters.includes(number);\n        const matched = matchedLetters.includes(number);\n        if (matched && candidate) {\n            return CANDIDATE;\n        }\n        if (matched && !candidate) {\n            return MATCHED;\n        }\n        if (!matched && candidate) {\n            return CANDIDATE;\n        }\n        return AVAILABLE\n    };\n\n    const gridItems = grid.letters.map((letter, index) =>\n        <GridLetter key={index}\n                    letter={letter}\n                    id={index}\n                    status={numberStatus(index)}\n                    onClick={onLetterClick}\n        />\n    )\n\n    return <React.Fragment>{gridItems}</React.Fragment>\n\n}\n\n","/Users/chrischase/Dev/word-search/src/features/grid/gridSlice.js",["91"],"/Users/chrischase/Dev/word-search/src/components/Counter.js",[],"/Users/chrischase/Dev/word-search/src/components/playAgainSlice.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":21},{"ruleId":"96","severity":1,"message":"100","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":19},{"ruleId":"96","severity":1,"message":"101","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":18},{"ruleId":"96","severity":1,"message":"102","line":12,"column":8,"nodeType":"98","messageId":"99","endLine":12,"endColumn":16},{"ruleId":"96","severity":1,"message":"103","line":18,"column":7,"nodeType":"98","messageId":"99","endLine":18,"endColumn":11},{"ruleId":"96","severity":1,"message":"104","line":19,"column":7,"nodeType":"98","messageId":"99","endLine":19,"endColumn":14},{"ruleId":"96","severity":1,"message":"105","line":21,"column":7,"nodeType":"98","messageId":"99","endLine":21,"endColumn":19},{"ruleId":"96","severity":1,"message":"106","line":34,"column":12,"nodeType":"98","messageId":"99","endLine":34,"endColumn":17},{"ruleId":"96","severity":1,"message":"107","line":34,"column":19,"nodeType":"98","messageId":"99","endLine":34,"endColumn":27},{"ruleId":"96","severity":1,"message":"108","line":37,"column":12,"nodeType":"98","messageId":"99","endLine":37,"endColumn":28},{"ruleId":"96","severity":1,"message":"109","line":37,"column":30,"nodeType":"98","messageId":"99","endLine":37,"endColumn":49},{"ruleId":"96","severity":1,"message":"110","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":12},{"ruleId":"111","severity":1,"message":"112","line":88,"column":9,"nodeType":"113","messageId":"114","endLine":98,"endColumn":10},{"ruleId":"111","severity":1,"message":"112","line":101,"column":9,"nodeType":"113","messageId":"114","endLine":130,"endColumn":10},{"ruleId":"96","severity":1,"message":"115","line":7,"column":9,"nodeType":"98","messageId":"99","endLine":7,"endColumn":13},{"ruleId":"96","severity":1,"message":"116","line":30,"column":11,"nodeType":"98","messageId":"99","endLine":30,"endColumn":23},{"ruleId":"96","severity":1,"message":"117","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":17},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'wordFound' is defined but never used.","'GridLetter' is defined but never used.","'matching' is defined but never used.","'rows' is assigned a value but never used.","'columns' is assigned a value but never used.","'StarsDisplay' is assigned a value but never used.","'words' is assigned a value but never used.","'setWords' is assigned a value but never used.","'foundWordIndexes' is assigned a value but never used.","'setFoundWordIndexes' is assigned a value but never used.","'Grid' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'show' is defined but never used.","'gameComplete' is assigned a value but never used.","'gridSetup' is defined but never used.","no-global-assign","no-unsafe-negation"]